{
  //使用 Serilog 就不用 Logging區段
  //"Logging": {
  //  "LogLevel": {
  //    "Default": "Information",
  //    "Microsoft.AspNetCore": "Warning"
  //  }
  //},

  /* Serilog Log Event Level：Verbose = 0, Debug = 1, Information = 2, Warning = 3, Error = 4, Fatal = 5 */
  "Serilog": {
    "MinimumLevel": {
      // 要在 "Default":"XXXX" 等級(含)以上才會紀錄。
      "Default": "Information",
      // Logic: 下面類別重設 LogEventLevel
      "Override": {
        "Microsoft.AspNetCore": "Warning",
        "AspNetCore.HealthChecks.UI": "Debug", //所有AspNetCore.HealthChecks.UI 記錄類別下的都指定為Debug
        "HealthChecks": "Debug", //所有HealthChecks 記錄類別下的都指定為Debug
        "HealthChecks.UI.Core.HostedService.HealthCheckCollectorHostedService": "Debug"
        //"System.Net.Http.HttpClient.health-checks": "Debug",
        //"HealthChecks.UI.Core.HostedService.HealthCheckReportCollector": "Debug"
      }
    },
    //"Using": [ "Serilog.Expressions" ],
    //排除條件(HealthCheck 的 Log 不要顯示 https://github.com/serilog/serilog-expressions )
    "Filter": [
      {
        "Name": "ByExcluding",
        "Args": {
          "expression": "Scope[?] = 'HealthReportCollector is collecting health checks results.'"
        }
      },
      {
        "Name": "ByExcluding",
        "Args": {
          "expression": "Contains(SourceContext, 'HealthChecks.UI.Core')"
        }
      }
      //{
      //  "Name": "ByExcluding",
      //  "Args": {
      //    "expression": "Contains(@mt, 'Executing HealthCheck collector HostedService.')"
      //  }
      //},
      //{
      //  "Name": "ByExcluding",
      //  "Args": {
      //    "expression": "Contains(@mt, 'HealthCheck collector HostedService executed successfully.')"
      //  }
      //},


      //{
      //  "Name": "ByExcluding",
      //  "Args": {
      //    //"expression": "RequestPath like '/health%'"
      //    "expression": "EndsWith(RequestPath, '/healthcheck')"
      //  }
      //},
      //{
      //  "Name": "ByExcluding",
      //  "Args": {
      //    "expression": "RequestPath like '/hc-ui%'"
      //  }
      //},
      //{
      //  "Name": "ByExcluding",
      //  "Args": {
      //    "expression": "RequestPath like '/hc%'"
      //  }
      //},
      //{
      //  "Name": "ByExcluding",
      //  "Args": {
      //    "expression": "EndsWith(RequestPath, '/_self')"
      //  }
      //},
      //{
      //  "Name": "ByExcluding",
      //  "Args": {
      //    "expression": "EndsWith(RequestPath, '/_api')"
      //  }
      //},
      //{
      //  "Name": "ByExcluding",
      //  "Args": {
      //    "expression": "EndsWith(RequestPath, '/_db')"
      //  }
      //}
    ],
    //"Filter": [
    //  { // Logic: 排除健康的所有健康檢查日誌，無法使用網址過濾
    //    "Name": "ByExcluding",
    //    "Args": {
    //      "expression": "EndsWith(RequestPath, '/healthcheck') and StatusCode=200"
    //    }
    //  }
    //],
    "WriteTo": [
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "Filter": [
              {
                "Name": "ByIncludingOnly",
                "Args": {
                  "expression": "(@l in ['Information'])" //那些 Level('Verbose', 'Debug', 'Information') 放入 Info_.log
                }
              }
            ],
            "WriteTo": [
              {
                "Name": "File",
                "Args": {
                  "path": "./logs/Info_.log",
                  //"outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] ({SourceContext}) {Message}{NewLine}{Exception}",
                  "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [ThreadId:{ThreadId}] [{Level}] [ClassName:{ClassName} / MethodName:{MethodName} / LineNumber:{LineNumber}] {Message:lj}{NewLine}{Exception}",
                  "fileSizeLimitBytes": "3000000",
                  "rollingInterval": "Day",
                  "retainedFileCountLimit": "7",
                  "rollOnFileSizeLimit": "true",
                  "shared": "true",
                  "flushToDiskInterval": "00:00:01"
                }
              }
            ]
          }
        }
      },
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "Filter": [
              {
                "Name": "ByIncludingOnly",
                "Args": {
                  "expression": "(@l in ['Error', 'Fatal'])" //那些 Level('Error', 'Fatal') 放入 Info_.log
                }
              }
            ],
            "WriteTo": [
              {
                "Name": "File",
                "Args": {
                  "path": "./logs/Error_.log",
                  "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] ({SourceContext}) {Message}{NewLine}{Exception}",
                  //"outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff} [ThreadId:{ThreadId}] [{Level}] [ClassName:{ClassName} / MethodName:{MethodName} / LineNumber:{LineNumber}] {Message:lj}{NewLine}{Exception}",
                  "fileSizeLimitBytes": "3000000",
                  "rollingInterval": "Day",
                  "retainedFileCountLimit": "7",
                  "rollOnFileSizeLimit": "true",
                  "shared": "true",
                  "flushToDiskInterval": "00:00:01"
                }
              }
            ]
          }
        }
      },

      /* 下面設定 失去 ControllerContext 相關資訊，但你可以預設取得 RequestMethod, RequestPath, StatusCode, Elapsed 這四個屬性 (Properties) */
      {
        "Name": "File",
        "Args": {
          "Path": "logs/api-.json",
          "rollingInterval": "Day",
          "retainedFileCountLimit": 720,
          "formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact"
        }
      }

      //  { "Name": "Console" },
      //  {
      //    "Name": "File",
      //    "Args": {
      //      "Path": "logs/All-.log",
      //      "rollingInterval": "Day",
      //      "retainedFileCountLimit": 720
      //    }
      //  },
      //  {
      //    "Name": "Logger",
      //    "Args": {
      //      "Filter": "ByIncludingOnly",
      //      "Contains": "Controller",
      //      "Path": "logs/api-.log",
      //      "rollingInterval": "Day",
      //      "retainedFileCountLimit": 720,
      //      "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {ControllerName} {Message:lj}{NewLine}{Exception}",          
      //    }
      //  },
      //  {
      //    "Name": "Logger",
      //    "Args": {
      //      "Filter": "ByIncludingOnly",
      //      "Contains": "Controller",
      //      "Path": "logs/api-JSON-.log",
      //      "rollingInterval": "Day",
      //      "retainedFileCountLimit": 720
      //      //"outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {ControllerName} {Message:lj}{NewLine}{Exception}"
      //    }
      //  },
      //  {
      //    "Name": "Logger",
      //    "Args": {
      //      "Filter": "ByExcluding",
      //      "Contains": "Controller",
      //      "Path": "logs/server-.log",
      //      "rollingInterval": "Day",
      //      "retainedFileCountLimit": 720
      //    }
      //  },
      //  {
      //    "Name": "File",
      //    "Args": {
      //      "Path": "logs/All-JSON-.log",
      //      "rollingInterval": "Day",
      //      "retainedFileCountLimit": 720,
      //      "formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact"
      //    }
      //  }


    ]
  },
  "AppConfig": {
    "Cors": "http://localhost:4200"
  },
  "ConnectionStrings": {
    "DefaultConnection": "MW8xdkUrMzdyZEdkU0JaanpKSjNuRnNzT3FpdkpTeUdGbmYzK0VTYnhTYnRqRzQ4cURGK2N0TW5tV1Q1MlMvTkhRY0NoOWw3eUZySWo2Z3JIY2RVcnVHc05ERnM3QVlZc3YyWEY0NXhnUHc9",
    "Cdp": "QVRuaDRrN01xWGdSb2xhQXNhdnFweTRDd0o3VDZVb1hkV1lDOTFqWEhKU2RHWVBmSURmTzQxNmw4WVZwczJvQ3pSQWFTdVRMRnVtaXhYOWluRmlJdGpZbmZKdERyUWt0c0VDNjBod1d4NmZFQy9MYmVCc1dxWHRCbUNoNFRYWDJmR3A0RDZHRUI3dkNYSUFvSkZ3L0FKeDgyTTBuNjlYSC9jWUdBOGFXL1RiekJjR2oxMk1hU0NwU2pNQTlGczEyR2lOdVJZODRnMFdqWUI0UDVGL2d1KzVqMjFWWkZ0STJNZTZkQjVDb1h3Yz0=",
    "Mail_hunter": "QVRuaDRrN01xWGdSb2xhQXNhdnFweTRDd0o3VDZVb1hkV1lDOTFqWEhKU3hjTmFpRkJqaVQrbnBubzNWZDlEc3FrWlVZMkxESjJOc3lGMkVpaHB5b0V2Uk04dEtzU01BZ0YyVUpKNWhKaTFDcVlhOFB6WVdDQTVqV1RuamRxVEVVbTk5MzFMaUl6NEt4UWM5WjhzZ3M3Z1YweGlkVTRzUU5tSTE4ODRWNGRBeHFtL282OFVIdlpTRW14Wjk2aDBkUE52a3c3MldnMHdHTCs5bG5Od25xc2pHemxUam1pRFNlWHQ1OS9tbXpwek02N1JWTERYeFJOeCtBdW5HVHREOA=="
  },
  "HealthChecks-UI": {
    "HealthChecks": [
      {
        "Name": "Host",
        "Uri": "_self"
      },
      {
        "Name": "DB",
        "Uri": "_db"
      },
      {
        "Name": "API",
        "Uri": "_api"
      },
      {
        "Name": "Hangfire",
        "Uri": "_hangfire"
      }
    ],
    //"Webhooks": [
    //  {
    //    "Name": "",
    //    "Uri": "",
    //    "Payload": "",
    //    "RestoredPayload": ""
    //  }
    //], 
    //更新時間
    "EvaluationTimeOnSeconds": 30,
    //失敗通知之間的最小秒數，以避免接收器氾濫。
    "MinimumSecondsBetweenFailureNotifications": 60
  },
  "EncryptionSettings": {
    "AESKey": "kS3Bv9qZLrM7YcXwP4fX8mJ2hG9vRqLq",
    "AESIV": "a8F3dK2pM1zQ9rTf"
  },
  "Kafka": {
    "BootstrapServers": "172.31.46.220:9092,172.31.0.146:9092,172.31.30.60:9092",
    "Topic": "AccuSender_Worker_feib-custom-export-Dev", //AccuSender_Worker_feib-custom-export-Prod
    "ConsumeTimeSpan": 180,
    "MaxPollIntervalMs": 1200000
  },
  "FileReadFileNameSettings": {
    "FeibSendBatch": "FeibSendBatch.YYYY-MM-DD"
  },
  "FileCopySettings": {
    "MailhunterLogSourceDirectory": "D:\\MailhunterUltimate\\Log", // 設定來源根目錄
    "MailhunterLogTargetDirectory": "D:\\MailhunterUltimate\\CopyLog" // 設定目的地根目錄
  },
  "FileReadSettings": {
    "MailhunterLogDirectory": "D:\\MailhunterUltimate\\Log" // 設定讀的根目錄
  },
  "FileChunkSetting": {
    "ChunkSize": 10,
    "ChunkSizeUnit": "MB"
  },
  "JobSchedulesCron": {
    "update-workflow-every-10min": "*/10 0-23 * * *", //每 10 分鐘執行一次
    "final": "59 23 * * *" //23:59:59執行
  },

  "AllowedHosts": "*"
}
